# -*- coding: utf-8 -*-
"""GC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18iZuWn1cJddYccAoa8ToK1JZG2Thlprl
"""


import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt

datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=1/255.0, shear_range=0.2,
 zoom_range=0.2, rotation_range=45,
horizontal_flip=True, vertical_flip=True,
validation_split=0.2)

from google.colab import drive
import tensorflow as tf

# Mount Google Drive
drive.mount('/content/drive')
train = datagen.flow_from_directory('/content/drive/MyDrive/GarbageClassification/Garbage classification/', target_size=(256, 256),
 batch_size=16, class_mode='categorical', interpolation='lanczos',
 shuffle=True, subset="training")

test = datagen.flow_from_directory('/content/drive/MyDrive/GarbageClassification/Garbage classification/', target_size=(256, 256),
 batch_size=16, class_mode='categorical', interpolation='lanczos',
 shuffle=True, subset="validation")

train.classes

len(train.classes)

train.image_shape

type(train)

t1=train[0]

type(t1)

len(t1)

len(t1[0])

type(t1[0])

t1[0].shape

len(t1[1])

type(t1[1])

t1[1].shape

t1[0][0]

t1[1][0]

plt.imshow(t1[0][0])

plt.imshow(t1[0][2])

t1[1][2]

for images,lables in train:
  print(len(images),len(lables))
  break

img_shape=(256,256,3)

imagenet=tf.keras.applications.MobileNet(include_top=False,weights="imagenet",input_shape=img_shape)

model=tf.keras.models.Sequential()

model.add(tf.keras.layers.Input(img_shape))
model.add(imagenet)
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(1024,activation='relu'))
model.add(tf.keras.layers.Dropout(0.2))
model.add(tf.keras.layers.Dense(6,activation='softmax'))

model.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

model.summary()

from tensorflow.keras.callbacks import ModelCheckpoint,EarlyStopping

myEarlyStopping=EarlyStopping(monitor='val_loss',verbose=1,patience=3)

myCheckpoint=ModelCheckpoint('grabageclassification-model-{epoch:03d}.h5',monitor='val_loss',verbose=0,save_best_only=True,mode='auto')

history=model.fit(train,epochs=8,validation_data=test,callbacks=[myEarlyStopping,myCheckpoint])

model.save('/content/drive/MyDrive/garbageclassification-final.keras')

train_acc=history.history['accuracy']

train_loss=history.history['loss']

epochsUnderwent=range(1,len(train_acc)+1)
print(epochsUnderwent)

plt.plot(epochsUnderwent,train_acc,'b*-',label='Training accuracy')
plt.title('Training accuracy')
plt.legend()
plt.show()

plt.figure()
plt.plot(epochsUnderwent,train_loss,'b*-',label='Trainang loss',color='red')
plt.title('Training Loss')
plt.legend()

model.evaluate(test)

predictions=model.predict(test)

type(predictions)

predictions[0:5]

finalpredictions=np.argmax(predictions,axis=1)

finalpredictions[0:5]

class_indices=train.class_indices
labels={v:k for k,v in class_indices.items()}
class_labels=[labels[i]for i in range(len(labels))]

labels

class_labels

from sklearn.metrics import classification_report

test.classes

report=classification_report(test.classes,finalpredictions,target_names=class_labels)

print(report)

import numpy as np

from tensorflow.keras.preprocessing.image import img_to_array,load_img

import numpy as np
from tensorflow.keras.preprocessing.image import img_to_array, load_img

def myPredict(image_path):
    # Load the image and preprocess it
    img = load_img(image_path, target_size=(256, 256), interpolation='lanczos')
    img_array = img_to_array(img)
    scaled_img_array = img_array / 255.0

    # Use the model to predict the class probabilities
    probs = model.predict(np.array([scaled_img_array]))

    # Map the probabilities to the class labels
    class_indices = train.class_indices
    labels = {v: k for k, v in class_indices.items()}
    predicted_class_index = np.argmax(probs)
    predicted_class = labels[predicted_class_index]

    # Get the confidence of the prediction
    confidence = probs[0][predicted_class_index]

    # Display the image and prediction
    plt.imshow(scaled_img_array)
    plt.title(f'Predicted class: {predicted_class} | Confidence: {confidence * 100:.2f}%')
    plt.show()

test1='/content/drive/MyDrive/glassbot.jpg'
test2='/content/drive/MyDrive/plastic.jpg'

train.class_indices

myPredict(test1)

myPredict(test2)

